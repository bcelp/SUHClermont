<?php

namespace SUH\GestionBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * EtudiantHandicapRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EtudiantHandicapeRepository extends EntityRepository
{
        
    /**
     * retourne toutes les informations relatives à un étudiant handicapé identifié par son id
     * (utilisé pour l'affichage d'un étudiant)
     * @param type $id
     * @param type $formation boolean
     * @param type $handicap boolean
     * @param type $aideExamen boolean
     * @return type
     */
    public function getInformationsStudent($id,$formation,$handicap,$aideExamen)
    {
        $qb = $this->createQueryBuilder('eh')
                ->where('eh.id=:id')
                ->setParameter('id', $id)
                ->join('eh.etudiant','etudiant')
                ->addSelect('etudiant')
                ->join('eh.mdph','mdph')
                ->addSelect('mdph');
        if($formation)
        {
            $qb->join('etudiant.listEtudiantFormation','lef')
                ->addSelect('lef')
                ->join('lef.formation','formation')
                ->addSelect('formation');
        }
        if($handicap)
        {
           $qb->join('eh.handicap','handicap')
                ->addSelect('handicap');
        }
        if($aideExamen)
        {
            $qb->join('eh.datesAideExamen','dae')
                ->addSelect('dae');
        }       
        return $qb->getQuery()->getResult();
    }
    
    /**
     * Retourne toutes les informations de tous les étudiants handicapés de la BDD
     * (utilisé pour l'exportation Excel)
     * @return type
     */
    public function getAllStudentsInformations()
    {        
        return $this->createQueryBuilder('eh')
                ->join('eh.etudiant','etudiant')
                ->addSelect('etudiant')
                ->join('etudiant.listEtudiantFormation','lef')
                ->addSelect('lef')
                ->join('lef.formation','formation')
                ->addSelect('formation')
                ->join('eh.mdph','mdph')
                ->addSelect('mdph')
                ->join('eh.handicap','handicap')
                ->addSelect('handicap')
                ->join('eh.datesAideExamen','dae')
                ->addSelect('dae')
                ->join('dae.aideExamen','aideExamen')
                ->addSelect('aideExamen')
                ->getQuery()
                ->getResult();
    }
    
    public function getEtudiantwithCondition($array){
       $qb = $this->createQueryBuilder('eh')
                ->where('1=1')
                ->join('eh.etudiant','etudiant')
                ->addSelect('etudiant')
                ->join('etudiant.listEtudiantFormation','lef')
                ->addSelect('lef')
                ->join('lef.formation','formation')
                ->addSelect('formation')
                ->join('eh.mdph','mdph')
                ->addSelect('mdph')
                ->join('eh.handicap','handicap')
                ->addSelect('handicap')
                ->join('eh.datesAideExamen','dae')
                ->addSelect('dae')
                ->join('dae.aideExamen','aideExamen')
                ->addSelect('aideExamen');
                
        foreach($array as $key => $value){
            switch($key){
                
                //ETUDIANT
                case("nomEtudiant"): $qb->andWhere('etudiant.nomEtudiant=:nom')
                                        ->setParameter('nom', $value);
                                        break;
                case("prenomEtudiant"): $qb->andWhere('etudiant.nomEtudiant=:prenom')
                                        ->setParameter('prenom', $value);
                                        break;
                case("age="):  $date = new \DateTime('now');
                              $annee= (int)$date->format('Y');
                              $anneeMax=$annee-$value-1 ."-" .$date->format('m-d');
                              $anneeMin=$annee-$value ."-" .$date->format('m-d');
                                        $qb->andWhere('etudiant.dateNaissance>=:dateMax')
                                        ->setParameter('dateMax', $anneeMax);
                                        $qb->andWhere('etudiant.dateNaissance<=:dateMin')
                                        ->setParameter('dateMin', $anneeMin);
                                        break;
                case("age<"): $date = new \DateTime('now');
                              $annee= (int)$date->format('Y');
                              $anneeMin=$annee-$value ."-" .$date->format('m-d');
                                        $qb->andWhere('etudiant.dateNaissance>=:dateMin')
                                        ->setParameter('dateMin', $anneeMin);
                                        break;
                case("age>"):  $date = new \DateTime('now');
                              $annee= (int)$date->format('Y');
                              $anneeMin=$annee-$value ."-" .$date->format('m-d');
                                        $qb->andWhere('etudiant.dateNaissance<=:dateMin')
                                        ->setParameter('dateMin', $anneeMin);
                                        break;
                case("mail"): $qb->andWhere('etudiant.mail=:mail')
                                        ->setParameter('mail', $value);
                                        break;
                case("telephone"): $qb->andWhere('etudiant.telephone=:telephone')
                                        ->setParameter('telephone', $value);
                                        break;
                                    
                //ETUDIANT HANDICAP
                case("qhandi"): if($value=="oui"|| $value=="Oui"){
                                    $value=true;
                                } if($value=="non"|| $value=="Non"){
                                    $value=false;
                                }
                                        $qb->andWhere('eh.qhandi=:date')
                                        ->setParameter('date', $value);
                                        break;
                case("rqth"): if($value=="oui"|| $value=="Oui"){
                                    $value=true;
                                } if($value=="non"|| $value=="Non"){
                                    $value=false;
                                }
                                        $qb->andWhere('eh.rqth=:rqth')
                                        ->setParameter('rqth', $value);
                                        break;
                case("tauxInvalidite"): $qb->andWhere('eh.tauxInvalidite=:tauxInvalidite')
                                        ->setParameter('tauxInvalidite', $value);
                                        break;
                // FORMATION
                case("diplome"): $qb->andWhere('formation.diplome=:diplome')
                                        ->setParameter('diplome', $value);
                                        break;
                case("composante"): $qb->andWhere('formation.composante=:composante')
                                        ->setParameter('composante', $value);
                                        break;
                case("filiere"): $qb->andWhere('formation.filiere=:filiere')
                                        ->setParameter('filiere', $value);
                                        break;
                case("cycle"): $qb->andWhere('formation.cycle=:cycle')
                                        ->setParameter('cycle', $value);
                                        break;
                case("etablissement"): $qb->andWhere('formation.etablissement=:etablissement')
                                        ->setParameter('etablissement', $value);
                                        break;
                // FORMATION ETUDIANT
                case("annee"): $qb->andWhere('lef.annee=:annee')
                                        ->setParameter('annee', $value);
                                        break;
                // MDPH
                case("reconnaissanceMdph"):  if($value=="oui"|| $value=="Oui"){
                                                $value=true;
                                            } if($value=="non"|| $value=="Non"){
                                                $value=false;
                                            }
                                        $qb->andWhere('mdph.reconnaissanceMdph=:reconnaissanceMdph')
                                        ->setParameter('reconnaissanceMdph', $value);
                                        break;
                case("departementMdph"): $qb->andWhere('mdph.departementMdph=:departementMdph')
                                        ->setParameter('departementMdph', $value);
                                        break;
                // HANDICAP
                case("nomHandicap"): $qb->andWhere('handicap.nomHandicap=:nomHandicap')
                                        ->setParameter('nomHandicap', $value);
                                        break;
                default: break;                    
            }
        }
        return $qb->getQuery()->getResult();
    }
}
